package $(Package);

import engine.base.Entity;
import engine.base.EntityGroup;
import engine.helpers.Profiler;
import engine.systems.MouseInputSystem;
import engine.systems.SoundSystem;
import engine.components.PhysicsComponent;
import engine.components.GraphicsComponent;
import engine.World;
import nape.phys.BodyType;

/**
$(CBI)* ...
$(CBI)* @author $(DefaultUser)
$(CBI)*/

class $(FileName) $(CSLB) extends Entity
{
	static var $(FileName)Head:$(FileName);
	var $(FileName)Next:$(FileName);
	var $(FileName)Self:$(FileName);
	
	private function new() 
	{
		super();
		$(FileName)Self = this;
	}
	
	public static function Create(Group:EntityGroup):$(FileName)
	{
		var Vessel:$(FileName);
		if($(FileName)Head != null) { Vessel = $(FileName)Head; $(FileName)Head = $(FileName)Head.$(FileName)Next; }
		else { Vessel = new $(FileName)(); }
		Vessel.Setup(Group);
		
		return Vessel;
	}
	
	override public function PreUpdate():Void
	{
		DoesPreUpdate = false;
	}
	
	override public function Update():Void
	{
		DoesUpdate = false;
	}
	
	override public function Draw():Void
	{
		DoesDraw = false;
	}
	
	override public function Recycle():Void
	{
		if(!InPool)
		{
			super.Recycle();
		}
		
	}
	
	override public function OnRebirth():Void
	{
		$(FileName)Next = $(FileName)Head;
		$(FileName)Head = $(FileName)Self;
	}
		
	
}